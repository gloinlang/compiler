import "@std"

def struct Vector_i32 {
    data: *i32;
    size: i32;
    capacity: i32;
}

def vector_new() -> Vector_i32 {
    // Allocate memory for 4 i32 elements (4 * 4 = 16 bytes)
    def byte_size: i64 = cast(16, "i64");
    def raw_ptr: *i8 = cast(std.malloc(byte_size), "*i8");
    def typed_ptr: *i32 = cast(raw_ptr, "*i32");
    
    def vec: Vector_i32 = Vector_i32 {
        data: typed_ptr,
        size: 0,
        capacity: 4
    };
    return vec;
}

def vector_size(vec: *Vector_i32) -> i32 {
    return vec.size;
}

def vector_capacity(vec: *Vector_i32) -> i32 {
    return vec.capacity;
}

def vector_free(vec: *Vector_i32) -> void {
    def raw_ptr: *i8 = cast(vec.data, "*i8");
    std.free(raw_ptr);
    vec.data = cast(0, "*i32");  // null pointer
    vec.size = 0;
    vec.capacity = 0;
}

def main() -> i32 {
    std.println("=== C++ Style Vector in Gloin ===");
    std.println("");
    
    std.println("Creating vector...");
    def mut vec: Vector_i32 = vector_new();
    
    std.print("Initial size: ");
    std.println(std.to_string(vector_size(&vec)));
    std.print("Initial capacity: ");
    std.println(std.to_string(vector_capacity(&vec)));
    
    std.println("");
    std.println("Vector created successfully!");
    std.println("Memory allocated and structure initialized.");
    
    // Clean up
    vector_free(&vec);
    std.println("Vector memory freed.");
    
    return 0;
}
