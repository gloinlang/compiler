import "@std"

def struct Vector_i32 {
    data: *i32;
    size: i32;
    capacity: i32;
}

def vector_new() -> Vector_i32 {
    def byte_size: i64 = cast(16, "i64");  // 4 elements * 4 bytes each
    def raw_ptr: *i8 = std.malloc(byte_size);
    
    def vec: Vector_i32 = Vector_i32 {
        data: cast(raw_ptr, "*i32"),
        size: 0,
        capacity: 4
    };
    return vec;
}

// Element access - need to implement this properly
def vector_get(vec: *Vector_i32, index: i32) -> i32 {
    // TODO: Implement proper pointer arithmetic
    // For now, return a dummy value
    return 999;
}

def vector_set(vec: *Vector_i32, index: i32, value: i32) -> void {
    // TODO: Implement proper pointer arithmetic
    // For now, just do nothing
}

def vector_push_back(vec: *Vector_i32, value: i32) -> void {
    if vec.size < vec.capacity {
        // Store value at position vec.size
        vector_set(vec, vec.size, value);
        vec.size = vec.size + 1;
    }
}

def vector_size(vec: *Vector_i32) -> i32 {
    return vec.size;
}

def vector_free(vec: *Vector_i32) -> void {
    def raw_ptr: *i8 = cast(vec.data, "*i8");
    std.free(raw_ptr);
    vec.data = cast(0, "*i32");
    vec.size = 0;
    vec.capacity = 0;
}

def main() -> i32 {
    std.println("=== Vector with Element Access ===");
    std.println("");
    
    def mut vec: Vector_i32 = vector_new();
    std.print("Created vector with capacity: ");
    std.println(std.to_string(vec.capacity));
    
    std.println("");
    std.println("Adding elements...");
    vector_push_back(&vec, 42);
    vector_push_back(&vec, 100);
    vector_push_back(&vec, 256);
    
    std.print("Vector size: ");
    std.println(std.to_string(vector_size(&vec)));
    
    std.println("");
    std.println("Element access (placeholder values):");
    std.print("vec[0]: ");
    std.println(std.to_string(vector_get(&vec, 0)));
    std.print("vec[1]: ");
    std.println(std.to_string(vector_get(&vec, 1)));
    
    vector_free(&vec);
    std.println("");
    std.println("ðŸŽ¯ Next: Implement real pointer arithmetic for element storage!");
    
    return 0;
}
