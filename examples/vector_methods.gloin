import "@std"

def struct Vector_i32 {
    data_addr: i64;
    size: i32;
    capacity: i32;
    
    pub size_method() -> i32 {
        return size;
    }
    
    pub capacity_method() -> i32 {
        return capacity;
    }
    
    pub empty() -> bool {
        return size == 0;
    }
    
    pub push_back(value: i32) -> void {
        if size < capacity {
            size = size + 1;
        }
    }
    
    pub clear() -> void {
        size = 0;
    }
}

def main() -> i32 {
    std.println("=== C++ Style Vector with Struct Methods ===");
    std.println("");
    
    def mut vec: Vector_i32 = Vector_i32 {
        data_addr: cast(0, "i64"),
        size: 0,
        capacity: 4
    };
    
    std.print("Initial size: ");
    std.println(std.to_string(vec.size_method()));
    std.print("Initial capacity: ");
    std.println(std.to_string(vec.capacity_method()));
    std.print("Is empty: ");
    if vec.empty() {
        std.println("true");
    } else {
        std.println("false");
    }
    
    std.println("");
    std.println("Adding elements...");
    vec.push_back(42);
    vec.push_back(100);
    std.print("Size after push_back: ");
    std.println(std.to_string(vec.size_method()));
    
    std.println("");
    std.println("Clearing...");
    vec.clear();
    std.print("Size after clear: ");
    std.println(std.to_string(vec.size_method()));
    
    std.println("");
    std.println("ðŸŽ‰ SUCCESS: Vector with methods INSIDE the struct!");
    std.println("âœ… This is TRUE C++ style OOP in Gloin!");
    
    return 0;
}