name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux-x64
            cmake_flags: ""
          - os: macos-latest
            name: macos-x64
            cmake_flags: ""
          - os: windows-latest
            name: windows-x64
            cmake_flags: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install LLVM (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y cmake llvm-dev clang build-essential

    - name: Install LLVM (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake llvm
        # Find the actual LLVM installation path
        LLVM_PATH=$(brew --prefix llvm)
        echo "LLVM installed at: $LLVM_PATH"
        echo "LLVM_DIR=${LLVM_PATH}/lib/cmake/llvm" >> $GITHUB_ENV
        echo "${LLVM_PATH}/bin" >> $GITHUB_PATH

    - name: Install LLVM (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake
        # Install LLVM manually with proper paths
        Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64.exe" -OutFile "llvm-installer.exe"
        Start-Process -FilePath "llvm-installer.exe" -ArgumentList "/S" -Wait
        echo "LLVM_DIR=C:\Program Files\LLVM\lib\cmake\llvm" >> $env:GITHUB_ENV
        echo "C:\Program Files\LLVM\bin" >> $env:GITHUB_PATH

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir build
        cd build
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR="${LLVM_DIR}" ..
        else
          cmake -DCMAKE_BUILD_TYPE=Release ..
        fi

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR="${env:LLVM_DIR}" -G "Visual Studio 17 2022" ..

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Test
      run: |
        cd build
        ctest --output-on-failure -C Release

    - name: Package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        mkdir -p ../release/gloin-${{ matrix.name }}
        cp gloinc ../release/gloin-${{ matrix.name }}/
        cp -r ../examples ../release/gloin-${{ matrix.name }}/
        cp ../README.md ../release/gloin-${{ matrix.name }}/
        cp ../LICENSE ../release/gloin-${{ matrix.name }}/
        cd ../release
        tar -czf gloin-${{ matrix.name }}.tar.gz gloin-${{ matrix.name }}/

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        mkdir -p ../release/gloin-${{ matrix.name }}
        copy Release/gloinc.exe ../release/gloin-${{ matrix.name }}/
        xcopy /E /I ../examples ../release/gloin-${{ matrix.name }}/examples
        copy ../README.md ../release/gloin-${{ matrix.name }}/
        copy ../LICENSE ../release/gloin-${{ matrix.name }}/
        cd ../release
        7z a gloin-${{ matrix.name }}.zip gloin-${{ matrix.name }}/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gloin-${{ matrix.name }}
        path: |
          release/gloin-${{ matrix.name }}.tar.gz
          release/gloin-${{ matrix.name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Gloin Compiler ${{ github.ref_name }}
        body: |
          # Gloin Programming Language Compiler ${{ github.ref_name }}
          
          This is a pre-release alpha version of the Gloin programming language compiler.
          
          ## What's Included
          - âœ… Complete compilation pipeline (Source â†’ LLVM IR â†’ Executable)
          - âœ… Core language features: variables, functions, structs, pointers
          - âœ… Import system: standard library, local modules, external packages
          - âœ… Standard library: I/O functions, type conversions
          - âœ… Multiple compiler modes: production, AST analysis, debug
          - âœ… Project management: `gloinc init` for new projects
          
          ## Platform Support
          - **Linux x64**: Full support with all features
          - **macOS x64**: Full support with all features  
          - **Windows x64**: Full support with all features
          
          ## Installation
          1. Download the appropriate package for your platform
          2. Extract to a directory in your PATH
          3. Run `gloinc --help` to get started
          
          ## Quick Start
          ```bash
          # Create a hello world program
          echo 'import "@std"
          def main() -> i32 {
              std.println("Hello, World!");
              return 0;
          }' > hello.gloin
          
          # Compile and run
          gloinc hello.gloin
          ./hello
          ```
          
          ## Current Limitations
          - ðŸš§ Some advanced syntax features still in development
          - ðŸš§ Standard library is basic but functional
          - ðŸš§ Error messages can be improved
          - ðŸš§ This is alpha software - expect rough edges
          
          ## Documentation
          Complete documentation and examples are included in the package and available at:
          https://github.com/gloinlang/compiler
          
          ## Feedback
          Please report issues and feedback at: https://github.com/gloinlang/compiler/issues
          
          ---
          
          **Note**: This is alpha software. While functional, it's still under active development.
        draft: false
        prerelease: true

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/gloin-linux-x64/gloin-linux-x64.tar.gz
        asset_name: gloin-linux-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/gloin-macos-x64/gloin-macos-x64.tar.gz
        asset_name: gloin-macos-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/gloin-windows-x64/gloin-windows-x64.zip
        asset_name: gloin-windows-x64.zip
        asset_content_type: application/zip